{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","selectedCampsiteType","setSelectedCampsiteType","KakaoMap","useRef","markerClusterer","handleClickCheckbox","type","includes","i","indexOf","slice","useEffect","container","document","getElementById","options","center","kakao","maps","LatLng","level","current","Map","MarkerClusterer","map","averageCenter","minLevel","markers","campingSiteData","filter","camp","some","position","marker","Marker","iwContent","infoWindow","InfoWindow","content","setMap","event","addListener","open","close","addMarkers","forEach","clear","ThemeProvider","CSSReset","Heading","as","Box","my","Stack","spacing","isInline","Checkbox","size","onChange","isChecked","id","w","h","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d335182.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  ThemeProvider,\n  CSSReset,\n  Heading,\n  Box,\n  Stack,\n  Checkbox,\n} from \"@chakra-ui/core\";\nimport campingSiteData from \"./data/camping.json\";\n\ndeclare const kakao: any;\n\ntype CAMPSITE_TYPE = \"일반야영장\" | \"자동차야영장\" | \"글램핑\" | \"카라반\";\n\nfunction App() {\n  const [selectedCampsiteType, setSelectedCampsiteType] = useState<\n    CAMPSITE_TYPE[]\n  >([\"일반야영장\", \"자동차야영장\"]);\n  const KakaoMap = useRef<any>();\n  const markerClusterer = useRef<any>(null);\n\n  useEffect(() => {\n    const container = document.getElementById(\"camp-map\");\n    const options = {\n      center: new kakao.maps.LatLng(37.264842, 126.96033),\n      level: 11,\n    };\n    KakaoMap.current = new kakao.maps.Map(container, options);\n\n    markerClusterer.current = new kakao.maps.MarkerClusterer({\n      map: KakaoMap.current,\n      averageCenter: true,\n      minLevel: 10,\n    });\n  }, []);\n\n  useEffect(() => {\n    const markers = campingSiteData\n      .filter((camp) => {\n        return selectedCampsiteType.some((type) =>\n          camp[\"캠핑(야영)장구분\"].includes(type)\n        );\n      })\n      .map((camp) => {\n        const position = new kakao.maps.LatLng(camp[\"위도\"], camp[\"경도\"]);\n        const marker = new kakao.maps.Marker({ position });\n        const iwContent = `\n          <div style=\"padding:4px;\">\n            <div><b>${camp[\"캠핑(야영)장명\"]}</b></div>\n            <div>${camp[\"캠핑(야영)장구분\"]}</div>\n          </div>\n        `;\n        const infoWindow = new kakao.maps.InfoWindow({ content: iwContent });\n\n        marker.setMap(KakaoMap.current);\n\n        kakao.maps.event.addListener(marker, \"mouseover\", () => {\n          infoWindow.open(KakaoMap.current, marker);\n        });\n\n        kakao.maps.event.addListener(marker, \"mouseout\", () => {\n          infoWindow.close();\n        });\n\n        return marker;\n      });\n\n    markerClusterer.current.addMarkers(markers);\n\n    return () => {\n      markers.forEach((marker) => marker.setMap(null));\n      markerClusterer.current.clear();\n    };\n  }, [selectedCampsiteType]);\n\n  function handleClickCheckbox(type: CAMPSITE_TYPE) {\n    if (selectedCampsiteType.includes(type)) {\n      const i = selectedCampsiteType.indexOf(type);\n      setSelectedCampsiteType([\n        ...selectedCampsiteType.slice(0, i),\n        ...selectedCampsiteType.slice(i + 1),\n      ]);\n    } else {\n      setSelectedCampsiteType([type, ...selectedCampsiteType]);\n    }\n  }\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Heading as=\"h1\">전국 캠프사이트 현황</Heading>\n      <Box my={4}>\n        <Stack spacing={10} isInline>\n          <Checkbox\n            size=\"lg\"\n            onChange={() => handleClickCheckbox(\"일반야영장\")}\n            isChecked={selectedCampsiteType.includes(\"일반야영장\")}\n          >\n            일반야영장\n          </Checkbox>\n          <Checkbox\n            size=\"lg\"\n            onChange={() => handleClickCheckbox(\"자동차야영장\")}\n            isChecked={selectedCampsiteType.includes(\"자동차야영장\")}\n          >\n            자동차야영장\n          </Checkbox>\n          <Checkbox\n            size=\"lg\"\n            onChange={() => handleClickCheckbox(\"글램핑\")}\n            isChecked={selectedCampsiteType.includes(\"글램핑\")}\n          >\n            글램핑\n          </Checkbox>\n          <Checkbox\n            size=\"lg\"\n            onChange={() => handleClickCheckbox(\"카라반\")}\n            isChecked={selectedCampsiteType.includes(\"카라반\")}\n          >\n            카라반\n          </Checkbox>\n        </Stack>\n      </Box>\n      <Box>\n        <Box id=\"camp-map\" w=\"100%\" h=\"80vh\" />\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}